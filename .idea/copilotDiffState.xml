<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/gig-dashboard/src/auth/AuthContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig-dashboard/src/auth/AuthContext.tsx" />
              <option name="originalContent" value="import React, { createContext, useContext, useEffect, useState } from 'react'&#10;import type { ReactNode } from 'react'&#10;import type { User } from '../types.d'&#10;&#10;type AuthContextType = {&#10;  user: User | null&#10;  token: string | null&#10;  signup: (payload: { name: string; email: string; password: string }) =&gt; Promise&lt;{ token: string; user: User }&gt;&#10;  login: (payload: { email: string; password: string }) =&gt; Promise&lt;{ token: string; user: User }&gt;&#10;  logout: () =&gt; void&#10;  updateProfile: (updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password'&gt;&gt;) =&gt; Promise&lt;User&gt;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined)&#10;&#10;const STORAGE_USERS = '_gp_users_v1'&#10;const STORAGE_TOKEN = 'gp_token'&#10;const STORAGE_USER = 'gp_user'&#10;&#10;function delay(ms = 300) {&#10;  return new Promise((res) =&gt; setTimeout(res, ms))&#10;}&#10;&#10;async function fakeSignup({ name, email, password }: { name: string; email: string; password: string }) {&#10;  await delay()&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  if (users.find((u) =&gt; u.email === email)) {&#10;    const e = new Error('Email already registered')&#10;    ;(e as any).code = 'EMAIL_EXISTS'&#10;    throw e&#10;  }&#10;  const user: User = { id: Date.now(), name, email, password, createdAt: new Date().toISOString() }&#10;  users.push(user)&#10;  localStorage.setItem(STORAGE_USERS, JSON.stringify(users))&#10;  const token = btoa(JSON.stringify({ id: user.id, t: Date.now() }))&#10;  localStorage.setItem(STORAGE_TOKEN, token)&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(user))&#10;  return { token, user }&#10;}&#10;&#10;async function fakeLogin({ email, password }: { email: string; password: string }) {&#10;  await delay()&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  const user = users.find((u) =&gt; u.email === email &amp;&amp; u.password === password)&#10;  if (!user) {&#10;    const e = new Error('Invalid credentials')&#10;    ;(e as any).code = 'INVALID_CREDENTIALS'&#10;    throw e&#10;  }&#10;  const token = btoa(JSON.stringify({ id: user.id, t: Date.now() }))&#10;  localStorage.setItem(STORAGE_TOKEN, token)&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(user))&#10;  return { token, user }&#10;}&#10;&#10;async function fakeUpdateProfile(updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password'&gt;&gt;) {&#10;  await delay()&#10;  const raw = localStorage.getItem(STORAGE_USER)&#10;  if (!raw) throw new Error('Not authenticated')&#10;  const current: User = JSON.parse(raw)&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  const idx = users.findIndex((u) =&gt; u.id === current.id)&#10;  const updated = { ...current, ...updates }&#10;  if (idx &gt;= 0) users[idx] = updated&#10;  localStorage.setItem(STORAGE_USERS, JSON.stringify(users))&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(updated))&#10;  return updated&#10;}&#10;&#10;export function AuthProvider({ children }: { children: ReactNode }) {&#10;  const [user, setUser] = useState&lt;User | null&gt;(() =&gt; {&#10;    const raw = localStorage.getItem(STORAGE_USER)&#10;    return raw ? (JSON.parse(raw) as User) : null&#10;  })&#10;  const [token, setToken] = useState&lt;string | null&gt;(() =&gt; localStorage.getItem(STORAGE_TOKEN))&#10;&#10;  useEffect(() =&gt; {&#10;    function onStorage(e: StorageEvent) {&#10;      if (e.key === STORAGE_USER) setUser(e.newValue ? (JSON.parse(e.newValue) as User) : null)&#10;      if (e.key === STORAGE_TOKEN) setToken(e.newValue)&#10;    }&#10;    window.addEventListener('storage', onStorage)&#10;    return () =&gt; window.removeEventListener('storage', onStorage)&#10;  }, [])&#10;&#10;  async function signup(payload: { name: string; email: string; password: string }) {&#10;    const res = await fakeSignup(payload)&#10;    setUser(res.user)&#10;    setToken(res.token)&#10;    return res&#10;  }&#10;&#10;  async function login(payload: { email: string; password: string }) {&#10;    const res = await fakeLogin(payload)&#10;    setUser(res.user)&#10;    setToken(res.token)&#10;    return res&#10;  }&#10;&#10;  function logout() {&#10;    localStorage.removeItem(STORAGE_TOKEN)&#10;    localStorage.removeItem(STORAGE_USER)&#10;    setToken(null)&#10;    setUser(null)&#10;  }&#10;&#10;  async function updateProfile(updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password'&gt;&gt;) {&#10;    const updated = await fakeUpdateProfile(updates)&#10;    setUser(updated)&#10;    return updated&#10;  }&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, token, signup, login, logout, updateProfile }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  )&#10;}&#10;&#10;export function useAuth(): AuthContextType {&#10;  const ctx = useContext(AuthContext)&#10;  if (!ctx) throw new Error('useAuth must be used within AuthProvider')&#10;  return ctx&#10;}&#10;" />
              <option name="updatedContent" value="import React, { createContext, useContext, useEffect, useState } from 'react'&#10;import type { ReactNode } from 'react'&#10;import type { User, AccountType } from '../types.d'&#10;&#10;type AuthContextType = {&#10;  user: User | null&#10;  token: string | null&#10;  signup: (payload: { name: string; email: string; password: string; accountType: AccountType }) =&gt; Promise&lt;{ token: string; user: User }&gt;&#10;  login: (payload: { email: string; password: string }) =&gt; Promise&lt;{ token: string; user: User }&gt;&#10;  logout: () =&gt; void&#10;  updateProfile: (updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password' | 'accountType'&gt;&gt;) =&gt; Promise&lt;User&gt;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined)&#10;&#10;const STORAGE_USERS = '_gp_users_v1'&#10;const STORAGE_TOKEN = 'gp_token'&#10;const STORAGE_USER = 'gp_user'&#10;&#10;function delay(ms = 300) {&#10;  return new Promise((res) =&gt; setTimeout(res, ms))&#10;}&#10;&#10;async function fakeSignup({ name, email, password, accountType }: { name: string; email: string; password: string; accountType: AccountType }) {&#10;  await delay()&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  if (users.find((u) =&gt; u.email === email)) {&#10;    const e = new Error('Email already registered')&#10;    ;(e as any).code = 'EMAIL_EXISTS'&#10;    throw e&#10;  }&#10;  const user: User = { id: Date.now(), name, email, password, accountType, createdAt: new Date().toISOString() }&#10;  users.push(user)&#10;  localStorage.setItem(STORAGE_USERS, JSON.stringify(users))&#10;  const token = btoa(JSON.stringify({ id: user.id, t: Date.now() }))&#10;  localStorage.setItem(STORAGE_TOKEN, token)&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(user))&#10;  return { token, user }&#10;}&#10;&#10;async function fakeLogin({ email, password }: { email: string; password: string }) {&#10;  await delay()&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  const user = users.find((u) =&gt; u.email === email &amp;&amp; u.password === password)&#10;  if (!user) {&#10;    const e = new Error('Invalid credentials')&#10;    ;(e as any).code = 'INVALID_CREDENTIALS'&#10;    throw e&#10;  }&#10;  const token = btoa(JSON.stringify({ id: user.id, t: Date.now() }))&#10;  localStorage.setItem(STORAGE_TOKEN, token)&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(user))&#10;  return { token, user }&#10;}&#10;&#10;async function fakeUpdateProfile(updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password' | 'accountType'&gt;&gt;) {&#10;  await delay()&#10;  const raw = localStorage.getItem(STORAGE_USER)&#10;  if (!raw) throw new Error('Not authenticated')&#10;  const current: User = JSON.parse(raw)&#10;  const users: User[] = JSON.parse(localStorage.getItem(STORAGE_USERS) || '[]')&#10;  const idx = users.findIndex((u) =&gt; u.id === current.id)&#10;  const updated = { ...current, ...updates }&#10;  if (idx &gt;= 0) users[idx] = updated&#10;  localStorage.setItem(STORAGE_USERS, JSON.stringify(users))&#10;  localStorage.setItem(STORAGE_USER, JSON.stringify(updated))&#10;  return updated&#10;}&#10;&#10;export function AuthProvider({ children }: { children: ReactNode }) {&#10;  const [user, setUser] = useState&lt;User | null&gt;(() =&gt; {&#10;    const raw = localStorage.getItem(STORAGE_USER)&#10;    return raw ? (JSON.parse(raw) as User) : null&#10;  })&#10;  const [token, setToken] = useState&lt;string | null&gt;(() =&gt; localStorage.getItem(STORAGE_TOKEN))&#10;&#10;  useEffect(() =&gt; {&#10;    function onStorage(e: StorageEvent) {&#10;      if (e.key === STORAGE_USER) setUser(e.newValue ? (JSON.parse(e.newValue) as User) : null)&#10;      if (e.key === STORAGE_TOKEN) setToken(e.newValue)&#10;    }&#10;    window.addEventListener('storage', onStorage)&#10;    return () =&gt; window.removeEventListener('storage', onStorage)&#10;  }, [])&#10;&#10;  async function signup(payload: { name: string; email: string; password: string; accountType: AccountType }) {&#10;    const res = await fakeSignup(payload)&#10;    setUser(res.user)&#10;    setToken(res.token)&#10;    return res&#10;  }&#10;&#10;  async function login(payload: { email: string; password: string }) {&#10;    const res = await fakeLogin(payload)&#10;    setUser(res.user)&#10;    setToken(res.token)&#10;    return res&#10;  }&#10;&#10;  function logout() {&#10;    localStorage.removeItem(STORAGE_TOKEN)&#10;    localStorage.removeItem(STORAGE_USER)&#10;    setToken(null)&#10;    setUser(null)&#10;  }&#10;&#10;  async function updateProfile(updates: Partial&lt;Pick&lt;User, 'name' | 'email' | 'password' | 'accountType'&gt;&gt;) {&#10;    const updated = await fakeUpdateProfile(updates)&#10;    setUser(updated)&#10;    return updated&#10;  }&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, token, signup, login, logout, updateProfile }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  )&#10;}&#10;&#10;export function useAuth(): AuthContextType {&#10;  const ctx = useContext(AuthContext)&#10;  if (!ctx) throw new Error('useAuth must be used within AuthProvider')&#10;  return ctx&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig-dashboard/src/pages/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig-dashboard/src/pages/Dashboard.tsx" />
              <option name="originalContent" value="import React from 'react'&#10;import { Outlet, useNavigate } from 'react-router-dom'&#10;import NavLink from '../components/NavLink'&#10;import { useAuth } from '../auth/AuthContext'&#10;import ProfileEdit from './ProfileEdit'&#10;&#10;function Overview() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Overview&lt;/h3&gt;&#10;      &lt;p&gt;Welcome to your gig dashboard — quick stats would appear here.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;function Gigs() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Gigs&lt;/h3&gt;&#10;      &lt;p&gt;List of gigs (placeholder)&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;function Settings() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Settings&lt;/h3&gt;&#10;      &lt;p&gt;Account settings (placeholder)&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default function Dashboard(): JSX.Element {&#10;  const { user, logout } = useAuth()&#10;  const nav = useNavigate()&#10;&#10;  function handleLogout() {&#10;    logout()&#10;    nav('/login')&#10;  }&#10;&#10;  // Simple path-driven content (no nested router inside dashboard for simplicity).&#10;  const pathname = window.location.pathname&#10;&#10;  return (&#10;    &lt;div className=&quot;dashboard-page&quot;&gt;&#10;      &lt;aside className=&quot;sidebar&quot;&gt;&#10;        &lt;div className=&quot;profile-mini&quot;&gt;&#10;          &lt;div className=&quot;avatar&quot;&gt;{(user?.name || 'U')[0]}&lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;div className=&quot;name&quot;&gt;{user?.name}&lt;/div&gt;&#10;            &lt;div className=&quot;email&quot;&gt;{user?.email}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className=&quot;side-nav&quot;&gt;&#10;          &lt;NavLink to=&quot;/dashboard&quot;&gt;Overview&lt;/NavLink&gt;&#10;          &lt;NavLink to=&quot;/dashboard/profile&quot;&gt;Profile&lt;/NavLink&gt;&#10;          &lt;NavLink to=&quot;/dashboard/gigs&quot;&gt;Gigs&lt;/NavLink&gt;&#10;          &lt;NavLink to=&quot;/dashboard/settings&quot;&gt;Settings&lt;/NavLink&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div style={{ marginTop: 'auto' }}&gt;&#10;          &lt;button className=&quot;btn-outline&quot; onClick={handleLogout}&gt;&#10;            Logout&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/aside&gt;&#10;&#10;      &lt;main className=&quot;main-area&quot;&gt;&#10;        {pathname === '/dashboard' &amp;&amp; &lt;Overview /&gt;}&#10;        {pathname.startsWith('/dashboard/gigs') &amp;&amp; &lt;Gigs /&gt;}&#10;        {pathname.startsWith('/dashboard/settings') &amp;&amp; &lt;Settings /&gt;}&#10;        {pathname.startsWith('/dashboard/profile') &amp;&amp; &lt;ProfileEdit /&gt;}&#10;        {/* Outlet reserved if you later embed nested routes */}&#10;        &lt;Outlet /&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="import React from 'react'&#10;import { Outlet, useNavigate } from 'react-router-dom'&#10;import NavLink from '../components/NavLink'&#10;import { useAuth } from '../auth/AuthContext'&#10;import ProfileEdit from './ProfileEdit'&#10;&#10;function Overview() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Overview&lt;/h3&gt;&#10;      &lt;p&gt;Welcome to your gig dashboard — quick stats would appear here.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;function Gigs() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Gigs&lt;/h3&gt;&#10;      &lt;p&gt;List of gigs (placeholder)&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;function Settings() {&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Settings&lt;/h3&gt;&#10;      &lt;p&gt;Account settings (placeholder)&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default function Dashboard(): JSX.Element {&#10;  const { user, logout } = useAuth()&#10;  const nav = useNavigate()&#10;&#10;  function handleLogout() {&#10;    logout()&#10;    nav('/login')&#10;  }&#10;&#10;  // Simple path-driven content (no nested router inside dashboard for simplicity).&#10;  const pathname = window.location.pathname&#10;&#10;  return (&#10;    &lt;div className=&quot;dashboard-page&quot;&gt;&#10;      &lt;aside className=&quot;sidebar&quot;&gt;&#10;        &lt;div className=&quot;profile-mini&quot;&gt;&#10;          &lt;div className=&quot;avatar&quot;&gt;{(user?.name || 'U')[0]}&lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;div className=&quot;name&quot;&gt;{user?.name}&lt;/div&gt;&#10;            &lt;div className=&quot;email&quot;&gt;{user?.email}&lt;/div&gt;&#10;            &lt;div className=&quot;account-type&quot;&gt;&#10;              {user?.accountType === 'seller' ? 'Seller Account' : 'Buyer Account'}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className=&quot;side-nav&quot;&gt;&#10;          &lt;NavLink to=&quot;/dashboard&quot;&gt;Overview&lt;/NavLink&gt;&#10;          &lt;NavLink to=&quot;/dashboard/profile&quot;&gt;Profile&lt;/NavLink&gt;&#10;          {user?.accountType === 'seller' &amp;&amp; &lt;NavLink to=&quot;/dashboard/gigs&quot;&gt;Gigs&lt;/NavLink&gt;}&#10;          &lt;NavLink to=&quot;/dashboard/settings&quot;&gt;Settings&lt;/NavLink&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div style={{ marginTop: 'auto' }}&gt;&#10;          &lt;button className=&quot;btn-outline&quot; onClick={handleLogout}&gt;&#10;            Logout&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/aside&gt;&#10;&#10;      &lt;main className=&quot;main-area&quot;&gt;&#10;        {pathname === '/dashboard' &amp;&amp; &lt;Overview /&gt;}&#10;        {pathname.startsWith('/dashboard/gigs') &amp;&amp; &lt;Gigs /&gt;}&#10;        {pathname.startsWith('/dashboard/settings') &amp;&amp; &lt;Settings /&gt;}&#10;        {pathname.startsWith('/dashboard/profile') &amp;&amp; &lt;ProfileEdit /&gt;}&#10;        {/* Outlet reserved if you later embed nested routes */}&#10;        &lt;Outlet /&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig-dashboard/src/pages/Login.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig-dashboard/src/pages/Login.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react'&#10;import { Link, useNavigate } from 'react-router-dom'&#10;import { useAuth } from '../auth/AuthContext'&#10;&#10;export default function Login(): JSX.Element {&#10;  const { login } = useAuth()&#10;  const nav = useNavigate()&#10;  const [form, setForm] = useState({ email: '', password: '' })&#10;  const [err, setErr] = useState('')&#10;  const [loading, setLoading] = useState(false)&#10;&#10;  async function onSubmit(e: React.FormEvent) {&#10;    e.preventDefault()&#10;    setErr('')&#10;    setLoading(true)&#10;    try {&#10;      await login(form)&#10;      nav('/dashboard')&#10;    } catch (e: any) {&#10;      setErr(e?.message ?? 'Sign in failed')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-page&quot;&gt;&#10;      &lt;div className=&quot;card&quot;&gt;&#10;        &lt;h2&gt;Sign in&lt;/h2&gt;&#10;        &lt;form onSubmit={onSubmit} className=&quot;form&quot;&gt;&#10;          &lt;input required placeholder=&quot;Email&quot; type=&quot;email&quot; value={form.email} onChange={(e) =&gt; setForm({ ...form, email: e.target.value })} /&gt;&#10;          &lt;input required placeholder=&quot;Password&quot; type=&quot;password&quot; value={form.password} onChange={(e) =&gt; setForm({ ...form, password: e.target.value })} /&gt;&#10;          {err &amp;&amp; &lt;div className=&quot;error&quot;&gt;{err}&lt;/div&gt;}&#10;          &lt;button className=&quot;btn&quot; type=&quot;submit&quot; disabled={loading}&gt;&#10;            {loading ? 'Signing in…' : 'Sign in'}&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div className=&quot;muted&quot;&gt;&#10;          New here? &lt;Link to=&quot;/signup&quot;&gt;Create an account&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react'&#10;import { Link, useNavigate, useLocation } from 'react-router-dom'&#10;import { useAuth } from '../auth/AuthContext'&#10;import type { AccountType } from '../types.d'&#10;&#10;export default function Login(): JSX.Element {&#10;  const { login } = useAuth()&#10;  const nav = useNavigate()&#10;  const location = useLocation()&#10;  &#10;  const [form, setForm] = useState({ &#10;    email: '', &#10;    password: '',&#10;    accountType: (location.state?.accountType as AccountType) || 'buyer'&#10;  })&#10;  const [err, setErr] = useState('')&#10;  const [loading, setLoading] = useState(false)&#10;&#10;  // Single reusable function to handle form input changes&#10;  function handleChange(e: React.ChangeEvent&lt;HTMLInputElement&gt;) {&#10;    const { name, value } = e.target&#10;    setForm({ ...form, [name]: value })&#10;  }&#10;&#10;  // Function to handle account type selection&#10;  function handleAccountTypeChange(accountType: AccountType) {&#10;    setForm({ ...form, accountType })&#10;  }&#10;&#10;  async function onSubmit(e: React.FormEvent) {&#10;    e.preventDefault()&#10;    setErr('')&#10;    setLoading(true)&#10;    try {&#10;      await login(form)&#10;      nav('/dashboard')&#10;    } catch (e: any) {&#10;      setErr(e?.message ?? 'Sign in failed')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;auth-page&quot;&gt;&#10;      &lt;div className=&quot;card&quot;&gt;&#10;        &lt;h2&gt;Sign in as a {form.accountType === 'buyer' ? 'Buyer' : 'Seller'}&lt;/h2&gt;&#10;        &#10;        {/* Account Type Toggle Buttons */}&#10;        &lt;div style={{ marginBottom: '20px', textAlign: 'center' }}&gt;&#10;          &lt;button&#10;            type=&quot;button&quot;&#10;            className={form.accountType === 'buyer' ? 'btn' : 'btn-outline'}&#10;            onClick={() =&gt; handleAccountTypeChange('buyer')}&#10;            style={{ marginRight: '10px' }}&#10;          &gt;&#10;            Buyer&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            type=&quot;button&quot;&#10;            className={form.accountType === 'seller' ? 'btn' : 'btn-outline'}&#10;            onClick={() =&gt; handleAccountTypeChange('seller')}&#10;          &gt;&#10;            Seller&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={onSubmit} className=&quot;form&quot;&gt;&#10;          &lt;input &#10;            required &#10;            name=&quot;email&quot;&#10;            placeholder=&quot;Email&quot; &#10;            type=&quot;email&quot; &#10;            value={form.email} &#10;            onChange={handleChange} &#10;          /&gt;&#10;          &lt;input &#10;            required &#10;            name=&quot;password&quot;&#10;            placeholder=&quot;Password&quot; &#10;            type=&quot;password&quot; &#10;            value={form.password} &#10;            onChange={handleChange} &#10;          /&gt;&#10;          {err &amp;&amp; &lt;div className=&quot;error&quot;&gt;{err}&lt;/div&gt;}&#10;          &lt;button className=&quot;btn&quot; type=&quot;submit&quot; disabled={loading}&gt;&#10;            {loading ? 'Signing in…' : 'Sign in'}&#10;          &lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div className=&quot;muted&quot;&gt;&#10;          New here? &lt;Link to=&quot;/signup&quot; state={{ accountType: form.accountType }}&gt;Create an account&lt;/Link&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gig-dashboard/src/pages/ProfileEdit.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gig-dashboard/src/pages/ProfileEdit.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react'&#10;import { useAuth } from '../auth/AuthContext'&#10;&#10;export default function ProfileEdit(): JSX.Element {&#10;  const { user, updateProfile } = useAuth()&#10;  const [form, setForm] = useState({ name: user?.name ?? '', email: user?.email ?? '' })&#10;  const [loading, setLoading] = useState(false)&#10;  const [msg, setMsg] = useState('')&#10;&#10;  async function onSubmit(e: React.FormEvent) {&#10;    e.preventDefault()&#10;    setLoading(true)&#10;    setMsg('')&#10;    try {&#10;      await updateProfile(form)&#10;      setMsg('Profile updated')&#10;    } catch (err: any) {&#10;      setMsg(err?.message ?? 'Failed to update')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Edit profile&lt;/h3&gt;&#10;      &lt;form className=&quot;form&quot; onSubmit={onSubmit} style={{ maxWidth: 420 }}&gt;&#10;        &lt;input required value={form.name} onChange={(e) =&gt; setForm({ ...form, name: e.target.value })} placeholder=&quot;Full name&quot; /&gt;&#10;        &lt;input required value={form.email} onChange={(e) =&gt; setForm({ ...form, email: e.target.value })} placeholder=&quot;Email&quot; /&gt;&#10;        &lt;button className=&quot;btn&quot; type=&quot;submit&quot; disabled={loading}&gt;&#10;          {loading ? 'Saving...' : 'Save'}&#10;        &lt;/button&gt;&#10;        {msg &amp;&amp; &lt;div className=&quot;muted&quot; style={{ marginTop: 8 }}&gt;{msg}&lt;/div&gt;}&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react'&#10;import { useAuth } from '../auth/AuthContext'&#10;import type { AccountType } from '../types.d'&#10;&#10;export default function ProfileEdit(): JSX.Element {&#10;  const { user, updateProfile } = useAuth()&#10;  const [form, setForm] = useState({ &#10;    name: user?.name ?? '', &#10;    email: user?.email ?? '',&#10;    accountType: user?.accountType ?? 'buyer' as AccountType&#10;  })&#10;  const [loading, setLoading] = useState(false)&#10;  const [msg, setMsg] = useState('')&#10;&#10;  async function onSubmit(e: React.FormEvent) {&#10;    e.preventDefault()&#10;    setLoading(true)&#10;    setMsg('')&#10;    try {&#10;      await updateProfile(form)&#10;      setMsg('Profile updated')&#10;    } catch (err: any) {&#10;      setMsg(err?.message ?? 'Failed to update')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h3&gt;Edit profile&lt;/h3&gt;&#10;      &lt;form className=&quot;form&quot; onSubmit={onSubmit} style={{ maxWidth: 420 }}&gt;&#10;        &lt;input required value={form.name} onChange={(e) =&gt; setForm({ ...form, name: e.target.value })} placeholder=&quot;Full name&quot; /&gt;&#10;        &lt;input required value={form.email} onChange={(e) =&gt; setForm({ ...form, email: e.target.value })} placeholder=&quot;Email&quot; /&gt;&#10;        &#10;        &lt;div className=&quot;account-type-selection&quot;&gt;&#10;          &lt;p&gt;Account Type:&lt;/p&gt;&#10;          &lt;div className=&quot;radio-group&quot;&gt;&#10;            &lt;label&gt;&#10;              &lt;input &#10;                type=&quot;radio&quot; &#10;                name=&quot;accountType&quot; &#10;                value=&quot;buyer&quot;&#10;                checked={form.accountType === 'buyer'}&#10;                onChange={() =&gt; setForm({ ...form, accountType: 'buyer' })}&#10;              /&gt;&#10;              Buyer - I want to purchase items&#10;            &lt;/label&gt;&#10;            &lt;label&gt;&#10;              &lt;input &#10;                type=&quot;radio&quot; &#10;                name=&quot;accountType&quot; &#10;                value=&quot;seller&quot;&#10;                checked={form.accountType === 'seller'}&#10;                onChange={() =&gt; setForm({ ...form, accountType: 'seller' })}&#10;              /&gt;&#10;              Seller - I want to sell items&#10;            &lt;/label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;button className=&quot;btn&quot; type=&quot;submit&quot; disabled={loading}&gt;&#10;          {loading ? 'Saving...' : 'Save'}&#10;        &lt;/button&gt;&#10;        {msg &amp;&amp; &lt;div className=&quot;muted&quot; style={{ marginTop: 8 }}&gt;{msg}&lt;/div&gt;}&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>